version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    container_name: robovers-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: robovers
      POSTGRES_PASSWORD: robovers123
      POSTGRES_DB: robovers
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - robovers-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U robovers -d robovers"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: robovers-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - robovers-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: robovers-backend
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: postgresql://robovers:robovers123@postgres:5432/robovers?schema=public
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 4010
    ports:
      - "4010:4010"
    networks:
      - robovers-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4010/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./backend/uploads:/app/uploads # For file uploads if needed

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: http://localhost:4010/api
    container_name: robovers-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4010/api
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - robovers-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: robovers-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@robovers.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    networks:
      - robovers-network
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: robovers-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./docker/nginx/ssl:/etc/nginx/ssl:ro  # Uncomment when SSL certificates are available
    networks:
      - robovers-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  robovers-network:
    driver: bridge
    name: robovers-network