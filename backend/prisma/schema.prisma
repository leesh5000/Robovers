// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  nickname         String   @unique
  profileImageUrl  String?
  role             UserRole @default(USER)
  isActive         Boolean  @default(true)
  emailVerified    Boolean  @default(false)
  emailVerifiedAt  DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  refreshTokens    RefreshToken[]

  @@index([email])
  @@index([nickname])
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model Post {
  id          String       @id @default(uuid())
  title       String
  content     String       @db.Text
  category    PostCategory
  authorId    String
  viewCount   Int          @default(0)
  likeCount   Int          @default(0)
  tags        String[]
  robotId     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  author      User         @relation(fields: [authorId], references: [id])
  robot       Robot?       @relation(fields: [robotId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
}

model Comment {
  id          String    @id @default(uuid())
  content     String    @db.Text
  postId      String
  authorId    String
  parentId    String?
  likeCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  likes       Like[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Like {
  id         String    @id @default(uuid())
  userId     String
  postId     String?
  commentId  String?
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Robot {
  id                String    @id @default(uuid())
  name              String
  manufacturer      String
  category          String
  purpose           String[]
  height            Float?
  weight            Float?
  dof               Int?
  payload           Float?
  walkingSpeed      Float?
  operationTime     Int?
  imageUrl          String?
  videoUrl          String?
  price             Float?
  releaseDate       DateTime?
  website           String?
  features          Json?
  specifications    Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  posts             Post[]
  company           Company?  @relation(fields: [companyId], references: [id])
  companyId         String?

  @@index([manufacturer])
  @@index([category])
}

model Company {
  id           String        @id @default(uuid())
  name         String        @unique
  logo         String?
  website      String?
  description  String?       @db.Text
  foundedYear  Int?
  country      String?
  stockSymbol  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  robots       Robot[]
  stockPrices  StockPrice[]

  @@index([name])
  @@index([stockSymbol])
}

model StockPrice {
  id           String    @id @default(uuid())
  companyId    String
  date         DateTime
  openPrice    Float
  closePrice   Float
  highPrice    Float
  lowPrice     Float
  volume       BigInt
  createdAt    DateTime  @default(now())

  // Relations
  company      Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, date])
  @@index([companyId])
  @@index([date])
}

enum UserRole {
  USER
  ADMIN
}

enum PostCategory {
  NEWS
  REVIEW
  DISCUSSION
  QUESTION
  TIP
}