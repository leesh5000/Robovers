import { UserRole } from '@prisma/client';

export class UserEntity {
  constructor(
    private readonly id: string,
    private email: string,
    private password: string,
    private nickname: string,
    private profileImageUrl: string | null,
    private role: UserRole,
    private isActive: boolean,
    private emailVerified: boolean,
    private emailVerifiedAt: Date | null,
    private lastLoginAt: Date | null,
    private readonly createdAt: Date,
    private updatedAt: Date,
  ) {}

  // Getters
  getId(): string {
    return this.id;
  }

  getEmail(): string {
    return this.email;
  }

  getPassword(): string {
    return this.password;
  }

  getNickname(): string {
    return this.nickname;
  }

  getProfileImageUrl(): string | null {
    return this.profileImageUrl;
  }

  getRole(): UserRole {
    return this.role;
  }

  isActiveUser(): boolean {
    return this.isActive;
  }

  isEmailVerified(): boolean {
    return this.emailVerified;
  }

  getEmailVerifiedAt(): Date | null {
    return this.emailVerifiedAt;
  }

  getLastLoginAt(): Date | null {
    return this.lastLoginAt;
  }

  getCreatedAt(): Date {
    return this.createdAt;
  }

  getUpdatedAt(): Date {
    return this.updatedAt;
  }

  // Business logic methods
  verifyEmail(): void {
    if (this.emailVerified) {
      throw new Error('이미 이메일 인증이 완료되었습니다.');
    }
    this.emailVerified = true;
    this.emailVerifiedAt = new Date();
    this.updatedAt = new Date();
  }

  updateLastLogin(): void {
    this.lastLoginAt = new Date();
    this.updatedAt = new Date();
  }

  updateProfile(nickname?: string, profileImageUrl?: string): void {
    if (nickname) {
      this.nickname = nickname;
    }
    if (profileImageUrl !== undefined) {
      this.profileImageUrl = profileImageUrl;
    }
    this.updatedAt = new Date();
  }

  changePassword(newPassword: string): void {
    this.password = newPassword;
    this.updatedAt = new Date();
  }

  deactivate(): void {
    if (!this.isActive) {
      throw new Error('이미 비활성화된 계정입니다.');
    }
    this.isActive = false;
    this.updatedAt = new Date();
  }

  activate(): void {
    if (this.isActive) {
      throw new Error('이미 활성화된 계정입니다.');
    }
    this.isActive = true;
    this.updatedAt = new Date();
  }

  isAdmin(): boolean {
    return this.role === UserRole.ADMIN;
  }

  canLogin(): boolean {
    return this.isActive && this.emailVerified;
  }

  // Factory method
  static create(params: {
    email: string;
    password: string;
    nickname: string;
    profileImageUrl?: string;
    role?: UserRole;
  }): UserEntity {
    const now = new Date();
    return new UserEntity(
      '', // ID will be generated by the database
      params.email,
      params.password,
      params.nickname,
      params.profileImageUrl || null,
      params.role || UserRole.USER,
      true, // isActive
      false, // emailVerified
      null, // emailVerifiedAt
      null, // lastLoginAt
      now, // createdAt
      now, // updatedAt
    );
  }

  // Reconstitution method for loading from database
  static reconstitute(params: {
    id: string;
    email: string;
    password: string;
    nickname: string;
    profileImageUrl: string | null;
    role: UserRole;
    isActive: boolean;
    emailVerified: boolean;
    emailVerifiedAt: Date | null;
    lastLoginAt: Date | null;
    createdAt: Date;
    updatedAt: Date;
  }): UserEntity {
    return new UserEntity(
      params.id,
      params.email,
      params.password,
      params.nickname,
      params.profileImageUrl,
      params.role,
      params.isActive,
      params.emailVerified,
      params.emailVerifiedAt,
      params.lastLoginAt,
      params.createdAt,
      params.updatedAt,
    );
  }
}